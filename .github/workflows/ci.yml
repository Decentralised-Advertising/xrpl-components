name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: '${{ github.workflow }}-${{ github.event.number || github.ref }}'
  cancel-in-progress: true

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true
  NX_VERBOSE_LOGGING: false

jobs:
  primary:
    runs-on: ubuntu-latest
    name: Primary
    steps:
      - uses: actions/checkout@v2
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - uses: actions/checkout@v2
        name: Checkout [main]
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2

      - name: Install node and yarn based on the volta config in our package.json
        uses: volta-cli/action@v1

      - name: Get yarn cache directory path and node version for cache key
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=node_version::$(node --version)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.yarn-cache-dir-path.outputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.yarn-cache-dir-path.outputs.node_version }}-yarn-

      - name: Install dependencies
        run: yarn --frozen-lockfile --ignore-scripts

      - name: Initialize the Nx Cloud distributed CI run
        run: npx nx-cloud start-ci-run

      - name: Check affected code formatting
        run: npx nx format:check

      - name: Run parallel distributed affected tasks for lint, test and build targets
        uses: jameshenry/parallel-bash-commands@v1
        with:
          cmd1: npx nx affected --target=lint --parallel --maxParallel=3
          cmd2: npx nx affected --target=test --parallel --maxParallel=3 --ci --code-coverage
          # storybook is built as part of the separate storybook.yml workflow, Next.js apps are built on Vercel
          cmd3: npx nx affected --target=build --prod --parallel --maxParallel=3 --exclude storybook,xrpl-components-demo

      - name: Stop all running agents for this CI run
        # It's important that we always run this step, otherwise in the case of any failures in preceding non-Nx steps, the agents will keep running and waste billable minutes
        if: ${{ always() }}
        run: npx nx-cloud stop-all-agents

  agents:
    name: Nx Distributed CI Agents
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        agent: [1, 2, 3]
    steps:
      - uses: actions/checkout@v2

      - name: Install node and yarn based on the volta config in our package.json
        uses: volta-cli/action@v1

      - name: Get yarn cache directory path and node version for cache key
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=node_version::$(node --version)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.yarn-cache-dir-path.outputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.yarn-cache-dir-path.outputs.node_version }}-yarn-

      - name: Install dependencies
        run: yarn --frozen-lockfile --ignore-scripts

      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent
